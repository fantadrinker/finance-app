AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  backend_lambdas_sam

  Sample SAM Template for backend_lambdas_sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 640
    Tracing: Active
  Api:
    TracingEnabled: true

Resources:
  # api gateway
  FinanceAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Test
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogs.Arn
        Format: >-
          {"requestId": "$context.requestId", "error": "$context.authorizer.error" }
      Auth:
        Authorizers:
          MyLambdaTokenAuthorizer:
            AuthorizerPayloadFormatVersion: 1.0
            FunctionInvokeRole:
              Fn::GetAtt:
                - MyAuthRole
                - Arn
            FunctionArn:
              Fn::GetAtt:
                - MyAuthFunction
                - Arn
            Identity:
              Headers:
                - Authorization
              ReauthorizeEvery: 0
          OAuthAuthorizer:
            JwtConfiguration:
              issuer: "https://dev-55m1hzkqt35ta6tx.us.auth0.com/"
              audience:
                - https://fbbvgusi51.execute-api.us-east-1.amazonaws.com
            IdentitySource: "$request.header.Authorization"
      CorsConfiguration:
        AllowMethods: 
          - OPTIONS
          - POST
          - GET
        AllowHeaders: 
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
        AllowOrigins:
          - "http://localhost:3000"
          - "https://fantadrinker.github.io"
        MaxAge: 600

  ApiLogs:
    Type: AWS::Logs::LogGroup

  # lambda functions
  MyAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: financeAuthorizer/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          BASE_URL: "https://dev-55m1hzkqt35ta6tx.us.auth0.com"
  
  # required permissions
  MyAuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "InvokeMyAuthFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: !GetAtt MyAuthFunction.Arn

  MultiplyFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: multiply/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
      - x86_64
      Events:
        Multiply:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /multiply
            Method: GET
            Auth:
              Authorizer: OAuthAuthorizer
  ActivitiesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: activities/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref FileCheckTable
      Architectures:
      - x86_64
      Environment:
        Variables:
          ACTIVITIES_TABLE: !Ref ActivitiesTable
          FILECHECK_TABLE: !Ref FileCheckTable
          BASE_URL: "https://dev-55m1hzkqt35ta6tx.us.auth0.com"
      Events:
        PostActivities:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /activities
            Method: POST
        GetActivities:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /activities
            Method: GET
  FileCheckFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: fileCheck/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FileCheckTable
      Architectures:
      - x86_64
      Environment:
        Variables:
          FILECHECK_TABLE: !Ref FileCheckTable
          BASE_URL: "https://dev-55m1hzkqt35ta6tx.us.auth0.com"
      Events:
        GetFileChecks:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /chksums
            Method: GET

  # dynamodb tables
  ActivitiesTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: user
          AttributeType: S
        - AttributeName: date
          AttributeType: S
      KeySchema: 
        - AttributeName: user
          KeyType: HASH
        - AttributeName: date
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  
  FileCheckTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: user
          AttributeType: S
        - AttributeName: date
          AttributeType: S
      KeySchema: 
        - AttributeName: user
          KeyType: HASH
        - AttributeName: date
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  MultiplyApi:
    Description: API Gateway endpoint URL for Prod stage for Multiply function
    Value: !Sub "https://${FinanceAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/multiply/"
  MultiplyFunction:
    Description: Multiply Lambda Function ARN
    Value: !GetAtt MultiplyFunction.Arn
  MultiplyFunctionIamRole:
    Description: Implicit IAM Role created for Multiply function
    Value: !GetAtt MultiplyFunctionRole.Arn

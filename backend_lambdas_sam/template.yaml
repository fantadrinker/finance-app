AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  backend_lambdas_sam

  Sample SAM Template for backend_lambdas_sam

Parameters:
  BranchPrefix:
    Type: String
    Default: "dev"
  ApiStageName:
    Type: String
    Default: "Test"
  SkipAuth:
    Type: String
    Default: "0" # 0 = false, 1 = true

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 640
    Tracing: Active
    Handler: app.lambda_handler
    Runtime: python3.9
    Architectures:
      - x86_64
    Environment:
      Variables:
        ACTIVITIES_TABLE: !Ref ActivitiesTable
        BASE_URL: "https://dev-55m1hzkqt35ta6tx.us.auth0.com"
        SKIP_AUTH: !Ref SkipAuth
    Layers:
      - !Ref AuthLayer
  Api:
    TracingEnabled: true

Resources:
  # api gateway
  FinanceAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref ApiStageName
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogs.Arn
        Format: >-
          {"requestId": "$context.requestId", "error": "$context.authorizer.error" }
      Auth:
        Authorizers:
          OAuthAuthorizer:
            JwtConfiguration:
              issuer: "https://dev-55m1hzkqt35ta6tx.us.auth0.com/"
              audience:
                - https://v3rmvn9yri.execute-api.us-east-1.amazonaws.com/Test/
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: OAuthAuthorizer
      CorsConfiguration:
        AllowMethods: 
          - OPTIONS
          - POST
          - GET
          - DELETE
        AllowHeaders: 
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
        AllowOrigins:
          - "http://localhost:3000"
          - "https://fantadrinker.github.io"
        MaxAge: 600

  ApiLogs:
    Type: AWS::Logs::LogGroup

  # lambda functions
  MyAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/financeAuthorizer/
  
  # required permissions
  MyAuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "InvokeMyAuthFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: !GetAtt MyAuthFunction.Arn

  AuthLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: AuthLayer
      ContentUri: lambdas/AuthLayer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9
      BuildArchitecture: x86_64

  ActivitiesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambdas/activities/
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable
        - S3WritePolicy:
            BucketName: !Sub 
              - "${AWS::AccountId}-${Branch}-activities-files"
              - Branch: !Ref BranchPrefix
      Environment:
        Variables:
          ACTIVITIES_BUCKET: !Sub 
            - "${AWS::AccountId}-${Branch}-activities-files"
            - Branch: !Ref BranchPrefix
      Events:
        PostActivities:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /activities
            Method: POST
        GetActivities:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /activities
            Method: GET
        DeleteActivities:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /activities
            Method: DELETE


  FileCheckFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambdas/fileCheck/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable
      Events:
        GetFileChecks:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /chksums
            Method: GET
  
  DeletedFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambdas/deleted/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable
      Events:
        GetDeleted:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /deleted
            Method: GET


  ActivityInsightsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambdas/activityInsights/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable
      Events:
        GetInsights:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /insights
            Method: GET
        
  MappingsFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambdas/mappings/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable
      Events:
        GetMappings:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /mappings
            Method: GET
        PostMappings:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /mappings
            Method: POST
        DeleteMappings:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /mappings
            Method: DELETE

  ActivitiesTableStreamProcessor:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambdas/activitiesStreams/
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable
        - DynamoDBStreamReadPolicy:
            TableName: !Ref ActivitiesTable
            StreamName: !GetAtt ActivitiesTable.StreamArn
      Events:
        ProcessNewActivitiesOrMappings:
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt ActivitiesTable.StreamArn
            StartingPosition: TRIM_HORIZON
            FilterCriteria:
              Filters:
                - Pattern: '{"dynamodb": {"Keys": {"sk": {"S": [{"prefix": "20"}, {"prefix": "mapping#"}]}}}}'
  
  MonthlyCheckFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambdas/monthlyCheck/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable
  
  WishListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/wishlist/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable
      Events:
        GetWishList:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /wishlist
            Method: GET
        PostWishList:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /wishlist
            Method: POST
        DeleteWishList:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /wishlist
            Method: DELETE
        UpdateWishList:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /wishlist
            Method: PUT

  BudgetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/budget/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable
      Events:
        GetBudget:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /budget
            Method: GET
        PostBudget:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /budget
            Method: POST
        DeleteBudget:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /budget
            Method: DELETE
        UpdateBudget:
          Type: HttpApi 
          Properties:
            ApiId:
              Ref: FinanceAPI
            Path: /budget
            Method: PUT


  # s3 bucket to store user-uploaded activities files
  # be EXTRA careful when changing this bucket!!!!
  ActivitiesFiles:
    Type: 'AWS::S3::Bucket'
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub 
        - "${AWS::AccountId}-${Branch}-activities-files"
        - Branch: !Ref BranchPrefix

  # dynamodb tables
  ActivitiesTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions:
        - AttributeName: user
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: user
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${FinanceAPI}.execute-api.${AWS::Region}.amazonaws.com/Test"
  Function:
    Description: Activities Lambda Function ARN
    Value: !GetAtt ActivitiesFunction.Arn
  
